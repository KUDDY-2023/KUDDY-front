import "./chatpage.scss";
import PartnerHead from "@components/Chat/PartnerHead";
import MessageInput from "@components/Chat/MessageInput";
import Message from "@components/Chat/Message";
import TodayBar from "@components/Chat/TodayBar";
import SystemMessage from "@components/Chat/SystemMessage";
import ConfirmedRequestMessage from "@components/Chat/ConfirmedRequestMessage";
import RequestMessage from "@components/Chat/RequestMessage";
import MakeMeetUpModal from "@components/MeetUp/MakeMeetUpModal";

import { useState, useEffect, useRef } from "react";
import { useParams } from "react-router-dom";

import {
  CompatClient,
  IMessage,
  Stomp,
  StompSubscription,
} from "@stomp/stompjs";
import SockJS from "sockjs-client";

import { useQuery } from "react-query";
import { chatGetAllMessage } from "@services/api/chat";

import { useRecoilState } from "recoil";
import { userInfoState } from "@services/store/auth";

import { profileGetProfile } from "@services/api/profile";
import { useUpdateDefaultProfile } from "@services/hooks/profile";

export default function ChatPage() {
  const [profile, setProfile] = useRecoilState(userInfoState); // Ï†ÑÏó≠ ÌîÑÎ°úÌïÑ recoil
  const token = window.localStorage.getItem("accessToken") as string; // ÌÜ†ÌÅ∞

  const [isOpenBottomModal, setIsOpenBottomModal] = useState(false);

  const [partnerInfo, setPartnerInfo] = useState({
    nickname: "",
    profileImageUrl: "",
  });

  const client = useRef<CompatClient>();
  const subscribe = useRef<StompSubscription>();

  const { roomId } = useParams();

  // Î©îÏÑ∏ÏßÄ Î™©Î°ù
  const [MessageArr, setMessageArr] = useState<IGetMessage[]>([]);
  const [FlightMessageArr, setFlightMessageArr] = useState<IGetMessage[]>([]);

  // Ïä§ÌÅ¨Î°§ Í¥ÄÎ†®
  const messageEndRef = useRef<HTMLDivElement | null>(null);
  const initialRenderRef = useRef(true);

  // ‚≠ê Ï±ÑÌåÖ ÎÇ¥Ïó≠ Í∞ÄÏ†∏Ïò§Îäî ÏøºÎ¶¨
  const { data } = useQuery("messages", () => chatGetAllMessage(roomId || ""), {
    select: data => data?.data.data,
    refetchOnMount: false,
    refetchOnWindowFocus: false, // ÎÑàÏóøÍµ¨ÎÇò Ìïò..
    cacheTime: 0,
  });

  // Î∞õÏïÑÏò® Î©îÏÑ∏ÏßÄ ÎÇ¥Ïó≠ Ï†ÄÏû•
  useEffect(() => {
    if (data) {
      setMessageArr(data.chatList);
      setPartnerInfo(data.receiverInfo);

      console.log("Ï±ÑÌåÖÎÇ¥Ïó≠", data);
    }
  }, [data]);

  // ‚≠ê ÎÇ¥ ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî ÏøºÎ¶¨
  const profileData = useQuery("profile", profileGetProfile, {
    refetchOnWindowFocus: false,
    retry: true,
  });

  const onSave = useUpdateDefaultProfile();

  // Ï†ÑÏó≠ ÏÉÅÌÉú - ÎÇ¥ ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï†ÄÏû•
  useEffect(() => {
    if (profileData.isSuccess) {
      console.log("üíô ÌîÑÎ°úÌïÑ Ï°∞Ìöå ÏøºÎ¶¨ isSuccess", profileData.data?.data.data);
      const res = profileData.data?.data.data;

      let email = res.memberInfo.email;
      let nickname = res.memberInfo.nickname;
      let profileImageUrl = res.memberInfo.profileImageUrl;
      let memberId = res.memberInfo.memberId;
      let role = res.role;

      localStorage.setItem("myEmail", email);

      onSave({
        email: email,
        nickname: nickname,
        profileImageUrl: profileImageUrl,
        memberId: memberId,
        role: role,
      });
    }
  }, [profileData.isSuccess]);

  useEffect(() => {
    console.log("‚≠ê‚≠ê‚≠ê Ï†ÑÏó≠ ÏÉÅÌÉú >>>>>>>> ", profile);
    //setMyEmail(profile.email);
  }, [profile]);

  // ÏÉà Î©îÏÑ∏ÏßÄ ÏôîÏùÑ ÎïåÏùò Ïä§ÌÅ¨Î°§
  useEffect(() => {
    if (messageEndRef.current) {
      console.log("‚ù§Ô∏è‚ù§Ô∏è ÏÉàÎ°úÏö¥ Î©îÏÑ∏ÏßÄ ");

      messageEndRef.current.scrollIntoView({ behavior: "smooth" });
      return;
    }
  }, [FlightMessageArr]);

  // ÏµúÏ¥à Ï†ëÏÜç ÏãúÏùò Ïä§ÌÅ¨Î°§
  useEffect(() => {
    setTimeout(() => {
      if (initialRenderRef.current && messageEndRef.current) {
        console.log("‚ù§Ô∏è‚ù§Ô∏è Ï≤òÏùå Ïã§Ìñâ");
        initialRenderRef.current = false;
        messageEndRef.current.scrollIntoView({
          behavior: "smooth",
        });
        return;
      }
    }, 1000);
  }, [MessageArr]);

  // ÎèôÌñâ ÎßåÎìúÎäî Î™®Îã¨ Îã´Îäî Î≤ÑÌäº
  const _handleCloseModal = () => {
    setIsOpenBottomModal(false);
  };

  // ÎèôÌñâ ÎßåÎìúÎäî Î™®Îã¨ Ïó¥Í∏∞ Î≤ÑÌäº
  const _handleOpenBottomModal = () => {
    setIsOpenBottomModal(true);
  };

  // ‚úÖ Íµ¨ÎèÖ) new message Ïù¥Î≤§Ìä∏Î°ú Î∞úÏÉùÌïú Î©îÏÑ∏ÏßÄ Î∞òÏòÅ
  const handleMessage = (newmsg: IMessage) => {
    let body = JSON.parse(newmsg.body);
    console.log("Íµ¨ÎèÖ ÌõÑ Î∞õÏïÑÏò® Í±∞ >>", body);

    const myEmail = localStorage.getItem("myEmail");

    body = {
      ...body,
      mine: body.senderEmail === myEmail,
    };
    console.log(">>>>‚≠ê", body);

    console.log("myEmail state", myEmail);
    // ÏÉÅÎåÄÎ∞©ÌïúÌÖåÏÑú Ïò® Î©îÏÑ∏ÏßÄ
    if (body.senderEmail !== myEmail) {
      console.log(body.senderEmail, "??", myEmail); // üî• Ïó¨Í∏∞ÏÑú ÏûêÍæ∏ myEmailÏù¥ ÏÇ¨ÎùºÏßê
      setFlightMessageArr(prevMessageArr => [...prevMessageArr, body]);
    }
  };

  // new Flight Î©îÏÑ∏ÏßÄ Î∞îÎ°ú ÌôîÎ©¥Ïóê Î∞òÏòÅÌïòÍ∏∞
  const handleMyMessage = (newmsg: any) => {
    const myEmail = localStorage.getItem("myEmail");

    newmsg = {
      ...newmsg,
      mine: newmsg.senderEmail === myEmail,
    };

    setFlightMessageArr(prevMessageArr => [...prevMessageArr, newmsg]);
  };

  // ‚úÖ Íµ¨ÎèÖ) update Ïù¥Î≤§Ìä∏Î°ú Î∞úÏÉùÌïú Î©îÏÑ∏ÏßÄ Î∞òÏòÅÌïòÍ∏∞
  const handleUpdatedMessage = (updatedMsg: IMessage) => {
    let newMsg = JSON.parse(updatedMsg.body);
    console.log("ÏóÖÎç∞Ïù¥Ìä∏  Î∞úÏÉù >", newMsg);

    let flag = true;
    // Ïù¥ÎØ∏ Ï∞æÏïòÎã§Î©¥
    MessageArr.forEach(msg => {
      if (msg.id === newMsg.id) flag = false;
    });

    setMessageArr(prevMessageArr => {
      const updatedArr = prevMessageArr.map(msg => {
        if (msg.id === newMsg.id) {
          console.log("1");
          return newMsg;
        } else {
          console.log("2");
          return msg;
        }
      });
      return updatedArr;
    });

    if (flag) {
      // ÏúÑÏóêÏÑú Ïù¥ÎØ∏ Ï∞æÏïòÎã§Î©¥ Ïã§ÌñâÌïòÏßÄ ÏïäÏùå
      console.log(" ‚ù§Ô∏è flight message Î≥ÄÌôî Î∞úÏÉù");
      setFlightMessageArr(prevFlightMessageArr => {
        const updatedFlightArr = prevFlightMessageArr.map(msg => {
          if (msg.id === newMsg.id) {
            console.log("3");
            return newMsg;
          } else {
            console.log("4");
            return msg;
          }
        });
        return updatedFlightArr;
      });
    }
  };

  useEffect(() => {
    console.log("üì¢ ", FlightMessageArr);
  }, [FlightMessageArr]);

  function onConnect() {
    if (client.current) {
      console.log("onConnect Ïó∞Í≤∞ ÏÑ±Í≥µ");

      // Íµ¨ÎèÖ - ÌäπÏ†ï Ï±ÑÌåÖÎ∞©Ïùò Î©îÏÑ∏ÏßÄ ÎÇ¥Ïö© Î∞õÏïÑÏò§Í∏∞
      subscribe.current = client.current.subscribe(
        `/topic/group/${roomId}`,
        msg => handleMessage(msg),
        {
          Authorization: `Bearer ${token}`,
        },
      );

      // Íµ¨ÎèÖ - Î©îÏÑ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ ÏÇ¨Ìï≠ Î∞õÏïÑÏò§Í∏∞
      client.current.subscribe(
        `/topic/updates/${roomId}`,
        msg => handleUpdatedMessage(msg),
        {
          Authorization: `Bearer ${token}`,
        },
      );
    }
  }

  function onError() {
    console.log("onError Ïó∞Í≤∞ Ïã§Ìå® ");
  }

  // ÎÇòÍ∞à Îïå ÏöîÏ≤≠ ÎÅäÍ∏∞
  function disconnectStomp(event: BeforeUnloadEvent) {
    event.preventDefault();
    event.returnValue = "";

    alert("???");
    //console.log("Ïã§ÌñâÎê®, ÌòÑÏû¨ Ïù¥Î©îÏùºÏùÄ", myEmail);
    const email = localStorage.getItem("email"); // ÏïÑ Ïù¥Í±∞ Î≥ÑÎ°†Îîî..
    fetch(
      `${process.env.REACT_APP_API_HOST}/chat/v1/chatrooms/${roomId}?email=${email}`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        keepalive: true,
      },
    );
    if (client.current) {
      client.current.disconnect();
      client.current.deactivate();
    }
    // if (subscribe.current) {
    //   subscribe.current.unsubscribe(); // Íµ¨ÎèÖ ÎÅäÍ∏∞
    // }
  }

  // ÏÜåÏºì Ïó∞Í≤∞Í≥º ÌîÑÎ°úÌïÑ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    // Stomp.over()Î°ú client.current Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
    // SocketJSÎ°ú ÏõπÏÜåÏºì Ïó∞Í≤∞ Íµ¨ÌòÑ
    client.current = Stomp.over(() => {
      return new SockJS(`${process.env.REACT_APP_API_HOST}/chat`, null, {
        transports: ["websocket", "xhr-streaming", "xhr-polling"],
      });
    });

    // ÏÜåÏºì Ïó∞Í≤∞
    client.current.connect(
      {
        Authorization: `Bearer ${token}`,
        roomId: roomId,
      },
      onConnect,
      onError,
    );

    //getProfile();

    // beforeunload Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌï† Îïå (Î∏åÎùºÏö∞Ï†ÄÎ•º Îã´Í±∞ÎÇò ÌéòÏù¥ÏßÄÎ•º Îñ†ÎÇ† Îïå) Ìò∏Ï∂úÎêòÎèÑÎ°ù Îì±Î°ù
    window.addEventListener("beforeunload", disconnectStomp);
    // document.addEventListener("visibilitychange", disconnectStomp);
    window.addEventListener("popstate", disconnectStomp);

    return () => {
      // localStorage ÎπÑÏö∞Í∏∞
      localStorage.removeItem("myEmail");
      // ÌéòÏù¥ÏßÄÎ•º ÎÇòÍ∞à Îïå Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      window.removeEventListener("beforeunload", disconnectStomp);
      //document.removeEventListener("visibilitychange", disconnectStomp);
      window.removeEventListener("popstate", disconnectStomp);

      if (client.current) {
        client.current.disconnect();
        client.current.deactivate();
        client.current.unsubscribe(`/topic/group/${roomId}`);
        client.current.unsubscribe(`/topic/updates/${roomId}`);
      }

      // if (subscribe.current) {
      //   subscribe.current.unsubscribe(); // Íµ¨ÎèÖ ÎÅäÍ∏∞
      // }
    };
  }, []);

  /* Ïó∞Í≤∞ ÎÅäÍ≤ºÏùÑ Îïå Îã§Ïãú Ïó∞Í≤∞ÌïòÍ∏∞ ÏúÑÌï® */
  const handleVisibilityChange = () => {
    if (!document.hidden) {
      console.log("Îã§Ïãú ÎèåÏïÑÏò¥");
    }
    // ÎåÄÏ∂©..Í∞ÄÏ†∏Ïò® ÏΩîÎìú
    if (document.visibilityState === "visible") {
      // Ïõπ Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú ÎèåÏïÑÏôîÏùÑ Îïå ÏÜåÏºì Ïû¨Ïó∞Í≤∞ ÏöîÏ≤≠
      //connectClient(roomId, onNewMessage);
    }
  };
  useEffect(() => {
    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, []);

  return (
    <div className="chat-page-style">
      <MakeMeetUpModal
        isModalOpen={isOpenBottomModal}
        onClose={_handleCloseModal}
        client={client}
        roomId={roomId || ""}
        myEmail={profile.email}
        myNickname={profile.nickname}
        memberId={profile.memberId}
        handleMyMessage={handleMyMessage}
      />
      <PartnerHead
        userName={partnerInfo.nickname}
        profileImgUrl={partnerInfo.profileImageUrl}
      />

      <div className="message-container">
        {/* <ConfirmedRequestMessage info={tempInfo} />
        <RequestMessage info={tempInfo2} />
        <TodayBar />
        <button onClick={updateMessage}>ÏÉÅÌÉú Î≥ÄÌôî ÌÖåÏä§Ìä∏</button>
        <SystemMessage type="feedback" /> */}

        {/* Í∏∞Ï°¥ Î©îÏÑ∏ÏßÄ Î†åÎçîÎßÅ */}
        {MessageArr?.map((msg: IGetMessage) => {
          if (msg.contentType === "TEXT") {
            return (
              <Message
                message={msg}
                messageType={msg.mine ? "my" : "partner"}
              />
            );
          }
          if (msg.contentType === "MEETUP") {
            if (msg.meetStatus === "NOT_ACCEPT") {
              if (profile.role === "KUDDY") {
                console.log(profile.role);
                return (
                  <RequestMessage
                    client={client}
                    info={msg}
                    myEmail={profile.email}
                    statusType={"KUDDY_NOT_ACCEPT"}
                  />
                );
              } else if (profile.role === "TRAVELER") {
                console.log(profile.role);
                return (
                  <RequestMessage
                    client={client}
                    info={msg}
                    myEmail={profile.email}
                    statusType={"TRAVELER_NOT_ACCEPT"}
                  />
                );
              }
            } else if (
              msg.meetStatus === "PAYED" ||
              msg.meetStatus === "COMPLETED" ||
              msg.meetStatus === "KUDDY_CANCEL" ||
              msg.meetStatus === "TRAVELER_CANCEL"
            ) {
              return (
                <ConfirmedRequestMessage
                  info={msg}
                  statusType={msg.meetStatus}
                />
              );
            }
          }
          return null;
        })}

        <hr />

        {/* ÏÉàÎ°úÏö¥ Î©îÏÑ∏ÏßÄ */}
        {FlightMessageArr?.map((msg: IGetMessage) => {
          if (msg.contentType === "TEXT") {
            console.log("üòÅ >> ", msg.mine);
            return (
              <Message
                message={msg}
                messageType={msg.mine ? "my" : "partner"}
              />
            );
          }
          if (msg.contentType === "MEETUP") {
            if (msg.meetStatus === "NOT_ACCEPT") {
              if (profile.role === "KUDDY") {
                console.log(profile.role);
                return (
                  <RequestMessage
                    client={client}
                    info={msg}
                    myEmail={profile.email}
                    statusType={"KUDDY_NOT_ACCEPT"}
                  />
                );
              } else if (profile.role === "TRAVELER") {
                console.log(profile.role);
                return (
                  <RequestMessage
                    client={client}
                    info={msg}
                    myEmail={profile.email}
                    statusType={"TRAVELER_NOT_ACCEPT"}
                  />
                );
              }
            } else if (
              msg.meetStatus === "PAYED" ||
              msg.meetStatus === "COMPLETED" ||
              msg.meetStatus === "KUDDY_CANCEL"
            ) {
              return (
                <ConfirmedRequestMessage
                  info={msg}
                  statusType={msg.meetStatus}
                />
              );
            }
          }
          return null;
        })}
      </div>

      <div ref={messageEndRef}></div>

      <MessageInput
        client={client}
        meetupBtnVisible={profile.role === "KUDDY"}
        onMakeMeetUp={_handleOpenBottomModal}
        roomId={roomId || ""}
        myEmail={profile.email}
        myNickname={profile.nickname}
        myId={profile.memberId}
        handleMyMessage={handleMyMessage}
      />
    </div>
  );
}
